name: Deploy to Hostinger

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: "deploy-prod"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Vite site
        run: npm run build

      - name: Verify build output
        run: |
          echo "üì¶ Build completed. Checking output..."
          echo "Contents of dist folder:"
          ls -la dist/
          echo "---"
          echo "Total files in dist:"
          find dist -type f | wc -l
          echo "---"
          echo "Total dist size:"
          du -sh dist/

      - name: Clean ALL state files (FORCE fresh upload)
        run: |
          echo "üßπ Cleaning state files to force upload..."
          rm -f .ftp-deploy-sync-state.json
          rm -f ./dist/.ftp-deploy-sync-state.json
          rm -f ./.ftp-deploy-sync-state.json
          # Remove any state files that might exist
          find . -name "*ftp-deploy-sync*" -delete
          echo "State files cleaned"

      - name: Deploy to Hostinger via FTPS
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftps
          port: 21
          local-dir: ./dist/
          server-dir: /domains/supplysideflooringinstallation.com/public_html/
          state-name: .ftp-deploy-sync-state.json
          log-level: verbose
          dangerous-clean-slate: true  # FORCE upload all files
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**

      - name: Verify Deployment
        if: always()
        run: |
          echo "üîç Deployment attempt completed"
          echo "Check the logs above for:"
          echo "1. Number of files uploaded"
          echo "2. Any error messages"
          echo "3. Final upload directory"